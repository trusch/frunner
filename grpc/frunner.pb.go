// Code generated by protoc-gen-go. DO NOT EDIT.
// source: frunner.proto

/*
Package grpc is a generated protocol buffer package.

It is generated from these files:
	frunner.proto

It has these top-level messages:
	InputData
	OutputData
*/
package grpc

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc1 "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type InputData struct {
	Data []byte `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
}

func (m *InputData) Reset()                    { *m = InputData{} }
func (m *InputData) String() string            { return proto.CompactTextString(m) }
func (*InputData) ProtoMessage()               {}
func (*InputData) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *InputData) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

type OutputData struct {
	// if true -> last OutputData packet
	Ready bool `protobuf:"varint,1,opt,name=ready" json:"ready,omitempty"`
	// false if error while execution
	Success bool `protobuf:"varint,2,opt,name=success" json:"success,omitempty"`
	// eventually error message in case of !success
	ErrorMessage string `protobuf:"bytes,3,opt,name=errorMessage" json:"errorMessage,omitempty"`
	// streaming output data (stdout)
	Output []byte `protobuf:"bytes,4,opt,name=output,proto3" json:"output,omitempty"`
	// streaming error data (stderr)
	Errors []byte `protobuf:"bytes,5,opt,name=errors,proto3" json:"errors,omitempty"`
}

func (m *OutputData) Reset()                    { *m = OutputData{} }
func (m *OutputData) String() string            { return proto.CompactTextString(m) }
func (*OutputData) ProtoMessage()               {}
func (*OutputData) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *OutputData) GetReady() bool {
	if m != nil {
		return m.Ready
	}
	return false
}

func (m *OutputData) GetSuccess() bool {
	if m != nil {
		return m.Success
	}
	return false
}

func (m *OutputData) GetErrorMessage() string {
	if m != nil {
		return m.ErrorMessage
	}
	return ""
}

func (m *OutputData) GetOutput() []byte {
	if m != nil {
		return m.Output
	}
	return nil
}

func (m *OutputData) GetErrors() []byte {
	if m != nil {
		return m.Errors
	}
	return nil
}

func init() {
	proto.RegisterType((*InputData)(nil), "grpc.InputData")
	proto.RegisterType((*OutputData)(nil), "grpc.OutputData")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc1.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc1.SupportPackageIsVersion4

// Client API for FunctionRunner service

type FunctionRunnerClient interface {
	Run(ctx context.Context, opts ...grpc1.CallOption) (FunctionRunner_RunClient, error)
}

type functionRunnerClient struct {
	cc *grpc1.ClientConn
}

func NewFunctionRunnerClient(cc *grpc1.ClientConn) FunctionRunnerClient {
	return &functionRunnerClient{cc}
}

func (c *functionRunnerClient) Run(ctx context.Context, opts ...grpc1.CallOption) (FunctionRunner_RunClient, error) {
	stream, err := grpc1.NewClientStream(ctx, &_FunctionRunner_serviceDesc.Streams[0], c.cc, "/grpc.FunctionRunner/Run", opts...)
	if err != nil {
		return nil, err
	}
	x := &functionRunnerRunClient{stream}
	return x, nil
}

type FunctionRunner_RunClient interface {
	Send(*InputData) error
	Recv() (*OutputData, error)
	grpc1.ClientStream
}

type functionRunnerRunClient struct {
	grpc1.ClientStream
}

func (x *functionRunnerRunClient) Send(m *InputData) error {
	return x.ClientStream.SendMsg(m)
}

func (x *functionRunnerRunClient) Recv() (*OutputData, error) {
	m := new(OutputData)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for FunctionRunner service

type FunctionRunnerServer interface {
	Run(FunctionRunner_RunServer) error
}

func RegisterFunctionRunnerServer(s *grpc1.Server, srv FunctionRunnerServer) {
	s.RegisterService(&_FunctionRunner_serviceDesc, srv)
}

func _FunctionRunner_Run_Handler(srv interface{}, stream grpc1.ServerStream) error {
	return srv.(FunctionRunnerServer).Run(&functionRunnerRunServer{stream})
}

type FunctionRunner_RunServer interface {
	Send(*OutputData) error
	Recv() (*InputData, error)
	grpc1.ServerStream
}

type functionRunnerRunServer struct {
	grpc1.ServerStream
}

func (x *functionRunnerRunServer) Send(m *OutputData) error {
	return x.ServerStream.SendMsg(m)
}

func (x *functionRunnerRunServer) Recv() (*InputData, error) {
	m := new(InputData)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _FunctionRunner_serviceDesc = grpc1.ServiceDesc{
	ServiceName: "grpc.FunctionRunner",
	HandlerType: (*FunctionRunnerServer)(nil),
	Methods:     []grpc1.MethodDesc{},
	Streams: []grpc1.StreamDesc{
		{
			StreamName:    "Run",
			Handler:       _FunctionRunner_Run_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "frunner.proto",
}

func init() { proto.RegisterFile("frunner.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 209 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x54, 0x90, 0xcd, 0x4a, 0xc5, 0x30,
	0x10, 0x85, 0x8d, 0xb7, 0xb7, 0xda, 0xa1, 0xfe, 0x30, 0x88, 0x04, 0x37, 0x96, 0xac, 0xba, 0x0a,
	0xa2, 0x2f, 0xe0, 0x42, 0x04, 0x17, 0x22, 0xe4, 0x0d, 0x62, 0x1a, 0x8b, 0x9b, 0xa4, 0x4c, 0x92,
	0x85, 0x6f, 0xe1, 0x23, 0x4b, 0x27, 0x56, 0xb9, 0xbb, 0x7c, 0x1f, 0x07, 0x4e, 0xce, 0xc0, 0xd9,
	0x07, 0x95, 0x10, 0x3c, 0xe9, 0x85, 0x62, 0x8e, 0xd8, 0xcc, 0xb4, 0x38, 0x75, 0x0b, 0xdd, 0x4b,
	0x58, 0x4a, 0x7e, 0xb2, 0xd9, 0x22, 0x42, 0x33, 0xd9, 0x6c, 0xa5, 0x18, 0xc4, 0xd8, 0x1b, 0x7e,
	0xab, 0x6f, 0x01, 0xf0, 0x56, 0xf2, 0x16, 0xb9, 0x82, 0x3d, 0x79, 0x3b, 0x7d, 0x71, 0xe6, 0xd4,
	0x54, 0x40, 0x09, 0x27, 0xa9, 0x38, 0xe7, 0x53, 0x92, 0xc7, 0xec, 0x37, 0x44, 0x05, 0xbd, 0x27,
	0x8a, 0xf4, 0xea, 0x53, 0xb2, 0xb3, 0x97, 0xbb, 0x41, 0x8c, 0x9d, 0x39, 0x70, 0x78, 0x0d, 0x6d,
	0xe4, 0x06, 0xd9, 0x70, 0xf1, 0x2f, 0xad, 0x9e, 0x73, 0x49, 0xee, 0xab, 0xaf, 0x74, 0xff, 0x08,
	0xe7, 0xcf, 0x25, 0xb8, 0xfc, 0x19, 0x83, 0xe1, 0x45, 0xa8, 0x61, 0x67, 0x4a, 0xc0, 0x0b, 0xbd,
	0x6e, 0xd2, 0x7f, 0x83, 0x6e, 0x2e, 0xab, 0xf8, 0xff, 0xbf, 0x3a, 0x1a, 0xc5, 0x9d, 0x78, 0x6f,
	0xf9, 0x04, 0x0f, 0x3f, 0x01, 0x00, 0x00, 0xff, 0xff, 0xb5, 0x45, 0xeb, 0x94, 0x13, 0x01, 0x00,
	0x00,
}
